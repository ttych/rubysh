#!/bin/sh
# -*- mode: sh -*-

# set -x


git_remote_url()
{
    git_remote_url=$(cd "${1:-.}" ; git remote get-url origin)
}

git_clone()
{
    mkdir -p "${2%/*}"
    git clone -q "$1" "$2"
}

git_update()
{
    if [ -n "$GIT_UPDATE_FORCE" ]; then
        git_update_force "$@"
    else
        git_update_simple "$@"
    fi
}

git_update_simple()
{
    if git rev-parse @{u} >/dev/null 2>&1; then
        git reset --quiet --hard HEAD &&
            git pull --quiet --no-rebase --ff-only
    fi
    git submodule --quiet update --recursive
}

git_update_force()
{
    if git rev-parse @{u} >/dev/null 2>&1; then
        git_branch_cur=`git rev-parse --abbrev-ref HEAD`
        git_rem=`git branch --format '%(upstream:remotename)'`
        git_branch_rem=`git branch --format '%(upstream)'`
        git_branch_rem="${git_branch_rem#*/$git_rem/}"

        git branch -d -r "$git_rem/$git_branch_rem"
        git fetch "$git_rem" "$git_branch_rem"

        git checkout -f "$git_rem/$git_branch_rem"
        git branch -f "$git_branch_cur" "$git_rem/$git_branch_rem"
        git checkout -f  "$git_branch_cur"
    fi
    git submodule --quiet update --recursive
}

RBENV_ORGA="${RBENV_ORGA:-https://github.com/rbenv}"
RBENV_REPO="${RBENV_REPO:-rbenv}"
RBENV_PLUGINS="${RBENV_PLUGINS:-ruby-build rbenv-vars rbenv-each rbenv-default-gems}"


wrbenv_help()
{
    cat <<EOF
Usage is :
      $0 [-h] [-D] <action> <action_parameters>

with action in :
     help
     info
     install
     update
     fupdate
     init
EOF
}

rbenv_check()
{
    [ -z "$1" ] && return 1
    [ -d "$1" ] || return 1
    [ -x "$1/bin/rbenv" ] || return 1
    RBENV_ROOT="$1" rbenv versions >/dev/null
}

rbenv_exec()
{
    rbenv_root "$1"
    shift
    RBENV_ROOT="$rbenv_root" "$rbenv_root/bin/rbenv" "$@"
}

rbenv_root()
{
    rbenv_root="${1:-$rbenv_root}"
    rbenv_root="${rbenv_root:-$RBENV_ROOT}"

    [ -n "$rbenv_root" ] && return 0

    for rbenv_root in "${HOME_ALT:+$HOME_ALT/.rbenv}" \
                          "$HOME/.rbenv" ;
    do
        rbenv_check "$rbenv_root" && break
    done
}

wrbenv_info()
{
    rbenv_root "$1"
    rbenv_check "$rbenv_root" || {
        echo >&2 "no valid rbenv found at \"$rbenv_root\""
        return 1
    }

    cat <<EOF
$(wrbenv_info_rbenv)

$(wrbenv_info_plugins)

$(wrbenv_info_ruby)
EOF
}

wrbenv_info_rbenv()
{
    echo '# rbenv distribution found:'
    git_remote_url "$rbenv_root"
    echo "$rbenv_root: $git_remote_url"
}

wrbenv_info_ruby()
{
    echo '# installed ruby versions:'
    RBENV_ROOT="$rbenv_root" rbenv versions
}

wrbenv_info_plugins()
(
    echo '# install rbenv plugins:'
    cd "$rbenv_root/plugins" || return 0
    for d in */; do
        git_remote_url "$d"
        echo "${d%/}: $git_remote_url"
    done
)

wrbenv_install()
{
    rbenv_root "$1"
    if rbenv_check "$rbenv_root"; then
        echo >&2 "a distribution already exists in \"$rbenv_root\""
        return 1
    fi
    [ -d "$1" ] && rm -Rf "$rbenv_root"
    wrbenv_install_base "$rbenv_root" &&
        wrbenv_install_plugins "$rbenv_root"
}

wrbenv_install_base()
{
    echo "install rbenv from $RBENV_ORGA/$RBENV_REPO"
    git_clone "$RBENV_ORGA/$RBENV_REPO" "$1"
}

wrbenv_install_plugins()
{
    for plugin in $RBENV_PLUGINS; do
        echo "install plugin $plugin from $RBENV_ORGA/$plugin"
        git_clone "$RBENV_ORGA/$plugin" "$1/plugins/$plugin"
    done
}

wrbenv_update()
{
    rbenv_root "$1"
    wrbenv_update_base "$rbenv_root" &&
        wrbenv_update_plugins "$rbenv_root"
}

wrbenv_update_base()
(
    echo "update rbenv"
    cd "$1"
    git_update
)

wrbenv_update_plugins()
(
    [ -d "$1/plugins" ] || mkdir -p "$1/plugins"
    for plugin in $RBENV_PLUGINS; do
        echo "update plugin $plugin"
        ( cd "$1/plugins/$plugin" 2>/dev/null && git_update ) ||
            git_clone "$RBENV_ORGA/$plugin" "$1/plugins/$plugin"
    done
)

wrbenv_fupdate()
{
    GIT_UPDATE_FORCE=1

    wrbenv_update "$@"
}

wrbenv_init()
{
    rbenv_root "$1"
    echo "export RBENV_ROOT=\"$rbenv_root\""
    rbenv_exec "$rbenv_root" init -
}

wrbenv()
{
    wrbenv=
    wrbenv__action=
    while getopts :hD opt; do
        case $opt in
            h) wrbenv_help
               exit 0
               ;;
            D) set -x ;;
        esac
    done
    shift $(($OPTIND - 1))

    case $1 in
        help|info|install|update|fupdate|init|"")
            wrbenv__action="wrbenv_${1:-info}"
            [ $# -gt 0 ] && shift
            $wrbenv__action "$@"
            ;;
        *)
            echo >&2 "unknown action \"$1\""
            wrbenv_help
            exit 1
            ;;
    esac
}

case "$0" in
    */wrbenv)
        wrbenv "$@"
        ;;
esac
